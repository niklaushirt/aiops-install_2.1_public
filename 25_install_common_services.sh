# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# Installing Script for all AI OPS components
#
# V2.0 
#
# Â©2020 nikh@ch.ibm.com
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"

export TEMP_PATH=~/aiops-install

# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# Do Not Edit Below
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"

set -o errexit
set -o pipefail
#set -o xtrace
source ./99_config-global.sh

export SCRIPT_PATH=$(pwd)
export LOG_PATH=""
__getClusterFQDN
__getInstallPath


__output "***************************************************************************************************************************************************"
__output "***************************************************************************************************************************************************"
__output "***************************************************************************************************************************************************"
__output "***************************************************************************************************************************************************"
__output "  "
__output "  AI OPS Manager on OpenShift"
__output "  "
__output "***************************************************************************************************************************************************"
__output "***************************************************************************************************************************************************"
__output "***************************************************************************************************************************************************"
__output "  "
__output "  "


# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Initialization
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
header1Begin "Initializing"




# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# GET PARAMETERS
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
header2Begin "Input Parameters" "magnifying"



        while getopts "t:d:p:s:l:c:" opt
        do
          case "$opt" in
              t ) INPUT_TOKEN="$OPTARG" ;;
              d ) INPUT_PATH="$OPTARG" ;;
              p ) INPUT_PWD="$OPTARG" ;;
              s ) INPUT_SC="$OPTARG" ;;
              l ) INPUT_LDAPPWD="$OPTARG";;
          esac
        done



        if [[ $INPUT_TOKEN == "" ]];
        then
            __output "       ERROR: Please provide the Registry Token"
            __output "       USAGE: $0 -t <REGISTRY_TOKEN> [-s <STORAGE_CLASS> -l <LDAP_ADMIN_PASSWORD> -d <TEMP_DIRECTORY>]"
            exit 1
        else
            __output "       Token                                      $INPUT_TOKEN"
            export ENTITLED_REGISTRY_KEY=$INPUT_TOKEN
        fi


        if [[ $INPUT_PATH == "" ]];
        then
            __output "       No Path provided, using                    $TEMP_PATH"
        else
            __output "       Temp Path                                  $INPUT_PATH"
            export TEMP_PATH=$INPUT_PATH
        fi


        if [[ $INPUT_SC == "" ]];
        then
            __output "       No Storage Class provided, using           $STORAGE_CLASS_BLOCK"
        else
            __output "       Storage Class                       $INPUT_SC"
            export STORAGE_CLASS_BLOCK=$INPUT_SC
        fi



        if [[ $INPUT_LDAPPWD == "" ]];
        then
            __output "       No LDAP admin password provided, using     $LDAP_ADMIN_PASSWORD"
        else
            __output "       LDAP Password                       **********"
            export LDAP_ADMIN_PASSWORD=$INPUT_LDAPPWD
        fi


header2End






# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Install Checks
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
header2Begin "Install Checks"

        getClusterFQDN
        
        #getHosts

        check_and_install_jq
        check_and_install_cloudctl
        check_and_install_kubectl
        check_and_install_oc
        check_and_install_helm
        checkHelmExecutable
        check_and_install_yq
        #dockerRunning
        checkOpenshiftReachable
        checkKubeconfigIsSet
        checkStorageClassExists
        checkDefaultStorageDefined
        #checkRegistryCredentials
        

header2End

header1End "Initializing"



# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# CONFIG SUMMARY
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
__output "---------------------------------------------------------------------------------------------------------------------------"
__output " âœ… Watson AI OPS Manager  2.1 (WAIOPS) will be installed in Cluster '$CLUSTER_NAME'"
__output "---------------------------------------------------------------------------------------------------------------------------"
__output "    ---------------------------------------------------------------------------------------------------------------------"
__output "  ðŸ”Ž Your configuration"
__output "    ---------------------------------------------------------------------------------------------------------------------"
__output "    CLUSTER :               $CLUSTER_NAME"
__output "    REGISTRY TOKEN:         $ENTITLED_REGISTRY_KEY"
__output "    INSTALL NAMESPACE:      $NAMESPACE"
__output "    ---------------------------------------------------------------------------------------------------------------------"
__output "    STORAGE CLASS:          $STORAGE_CLASS_FILE"
__output "    ---------------------------------------------------------------------------------------------------------------------"
__output "    INSTALL PATH:           $INSTALL_PATH"
__output "---------------------------------------------------------------------------------------------------------------------------"
__output "  "
__output "  "
__output "  "
__output "  "







# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Installing Prerequisites
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------

header1Begin "Install Prerequisites"
  

    
        header2Begin "Patch OCP Registry"    
            oc patch configs.imageregistry.operator.openshift.io/cluster --patch '{"spec":{"defaultRoute":true}}' --type=merge
        header2End




        header2Begin "Create Namespyce $NAMESPACE"    
            oc create ns $NAMESPACE || true
        header2End




        header2Begin "Adjust OCP Stuff"
            oc adm policy add-role-to-user cpd-admin-role $(oc whoami) --role-namespace=$NAMESPACE -n $NAMESPACE
            oc project $NAMESPACE
        header2End





        header2Begin "Create Pull Secret"
            oc create secret docker-registry 'ibm-entitlement-pull-secret' --docker-server=$ENTITLED_REGISTRY --docker-username=$ENTITLED_REGISTRY_USER --docker-password=$ENTITLED_REGISTRY_KEY --namespace=$NAMESPACE || true
        header2End




        header2Begin "AI OPS - Create Subscription for Strimzi"
            CPD_SUB=$(kubectl get subscription -n openshift-operators | grep strimzi-kafka-operator 2>&1 ) || true
            if [[ $CPD_SUB =~ "strimzi-kafka-operator" ]];
            then
                __output "Strimzi Subscription already installed. Skipping..."
            else
                kubectl apply -f ./waiops-strimzi-subscription.yaml
                oc label --overwrite namespace $NAMESPACE ns=$NAMESPACE  || true

                progressbar 60
            fi
        header2End


header1End "Install Prerequisites"










# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Installing AI OPS
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    


header1Begin "Install AIOPS Manager for OpenShift"
  

        header2Begin "AI OPS - Create Template Files"
            cp ./waiops-aiops-manager-template.yaml $TEMP_PATH/$CLUSTER_NAME/waiops-aiops-manager.yaml
            ${SED} -i "s/<STORAGE_CLASS>/$STORAGE_CLASS_FILE/" $TEMP_PATH/$CLUSTER_NAME/waiops-aiops-manager.yaml
            ${SED} -i "s/<NAMESPACE>/$NAMESPACE/" $TEMP_PATH/$CLUSTER_NAME/waiops-aiops-manager.yaml
            ${SED} -i "s/<ENV_SIZE>/$WAIOPS_SIZE/" $TEMP_PATH/$CLUSTER_NAME/waiops-aiops-manager.yaml
        header2End





        header2Begin "AI OPS - Install CatalogSource"
            kubectl apply -f ./waiops-catalogsource.yaml

            __output " ${wrench} Restart Marketplace (HACK)"
                oc delete pod -n openshift-marketplace -l name=marketplace-operator 2>&1
            __output "      OK"
            __output "  "

            progressbar 60
        header2End




        header2Begin "AI OPS - Install Subscription"
            kubectl apply -f ./waiops-catalog-subscription.yaml || true
            progressbar 60
        header2End




        header2Begin "AI OPS - Install AIOPS Manager CR"
            kubectl apply -f $TEMP_PATH/$CLUSTER_NAME/waiops-aiops-manager.yaml || true
        header2End




        header2Begin "AI OPS - Install"
        
        header2End


header1End "Install AI OPS for OpenShift"














__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output " âœ… AI OPS Manager Installed"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "***************************************************************************************************************************************************"
__output "***************************************************************************************************************************************************"


