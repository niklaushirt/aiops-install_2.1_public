# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# Installing Script for Rook/Ceph
#
# V2.0 
#
# ¬©2020 nikh@ch.ibm.com
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"

export TEMP_PATH=~/aiops-install

# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# Do Not Edit Below
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"

set -o errexit
set -o pipefail
#set -o xtrace
source ./99_config-global.sh

export SCRIPT_PATH=$(pwd)
export LOG_PATH=""
__getClusterFQDN
__getInstallPath

banner 
__output "***************************************************************************************************************************************************"
__output "***************************************************************************************************************************************************"
__output "  "
__output "  Install Rook/Ceph"
__output "  "
__output "***************************************************************************************************************************************************"
__output "  "
__output "  "


# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Initialization
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
header1Begin "Initializing"




# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# GET PARAMETERS
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
header2Begin "Input Parameters" "magnifying"



        while getopts "t:d:p:l:c:" opt
        do
          case "$opt" in
              t ) INPUT_TOKEN="$OPTARG" ;;
              d ) INPUT_PATH="$OPTARG" ;;
              p ) INPUT_PWD="$OPTARG" ;;
              l ) INPUT_LDAPPWD="$OPTARG";;
          esac
        done



     

        if [[ $INPUT_PATH == "" ]];
        then
            __output "       No Path provided, using   $TEMP_PATH"
        else
            __output "       Temp Path      $INPUT_PATH"
            export TEMP_PATH=$INPUT_PATH
        fi


        export STORAGE_CLASS_FILE=$WAIOPS_AI_MGR_STORAGE_CLASS_FILE

header2End






# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Install Checks
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
header2Begin "Install Checks"

        getClusterFQDN
        
        #getHosts
        check_and_install_kubectl
        check_and_install_oc
        checkOpenshiftReachable
        checkKubeconfigIsSet
        

header2End


header1End "Initializing"



# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Installing Prerequisites
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------

header1Begin "Install Rook/Ceph"
  
        header2Begin "Install"
        
            MYFS_READY=$(oc get pods -n rook-ceph | grep "rook-ceph-mds-myfs" | grep "Running" | grep "1/1" || true) 
            OSD_READY=$(oc get pods -n rook-ceph | grep "rook-ceph-osd" | grep "Running" | grep "1/1" || true) 


            if [[ $OSD_READY =~ "Running" ]] && [[ $MYFS_READY =~ "Running" ]];
            then
                __output "     ‚≠ï Rook/Ceph already installed... Skipping"
            else           
                __output "     üöÄ Installing Rook Ceph..."
                ./tools/7_storage/install-rook.sh
                __output "     ‚úÖ Rook Ceph installed..."

                #OSD_READY=$(oc get pods -n rook-ceph | grep "rook-ceph-osd" | grep "Running" | grep "1/1" || true) 
                #while  ([[ ! $OSD_READY =~ "Running" ]]); do 
                #    OSD_READY=$(oc get pods -n rook-ceph | grep "rook-ceph-osd" | grep "Running" | grep "1/1" || true) 
                #    __output "   üï¶ Rook/Ceph not ready. Waiting for 10 seconds...." && sleep 10; 
#
                #    JOB_INIT_ERROR=$(oc get pods -n rook-ceph | grep "rook-ceph-detect" | grep "ImagePull" |awk '{print $1}' || true)
                #    if [[ ! $JOB_INIT_ERROR == "" ]];
                #    then
                #        __output "     ‚ùå Image Pull Errors... You might want to add the Docker Pull Secret in openshift-configuration/pull-secret to avoid Docker rate-limiting"
                #    fi
                #done

                oc create route passthrough dash -n rook-ceph --service=rook-ceph-mgr-dashboard --port=8443

                #HACK
                kubectl -n rook-ceph create secret generic --type kubernetes.io/rook rook-ceph-crash-collector-keyring

                MYFS_READY=$(oc get pods -n rook-ceph | grep "rook-ceph-mds-myfs" | grep "Running" | grep "1/1" || true) 
                while  ([[ ! $MYFS_READY =~ "Running" ]]); do 
                    MYFS_READY=$(oc get pods -n rook-ceph | grep "rook-ceph-osd" | grep "Running" | grep "1/1" || true) 
                    __output "   üï¶ Rook/Ceph not ready. Waiting for 10 seconds...." && sleep 10; 
                    
                    JOB_INIT_ERROR=$(oc get pods -n rook-ceph | grep "rook-ceph-detect" | grep "ImagePull" |awk '{print $1}' || true)
                    if [[ ! $JOB_INIT_ERROR == "" ]];
                    then
                        __output "     ‚ùå Image Pull Errors... You might want to add the Docker Pull Secret in openshift-configuration/pull-secret to avoid Docker rate-limiting" 
                    fi

                done
            
            fi

           
        header2End


        header2Begin "Storage Checks"

            checkStorageClassExists
            checkDefaultStorageDefined

        header2End

        header2Begin "Rook/Ceph Dashboard Connection Details"
            
                __output "---------------------------------------------------------------------------------------------"
                __output "---------------------------------------------------------------------------------------------"

                __output "    Rook/Ceph Dashboard :"
                __output "        URL:      https://dash-rook-ceph.apps.$CLUSTER_NAME/"
                __output "        User:     admin"
                __output "        Password: $(kubectl -n rook-ceph get secret rook-ceph-dashboard-password -o jsonpath="{['data']['password']}" | base64 --decode)"
        header2End

header1End "Install Rook/Ceph"





__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output " ‚úÖ Rook/Ceph Installed"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "***************************************************************************************************************************************************"
__output "***************************************************************************************************************************************************"


